= react_component('HelloMessage', {name: 'Andrew'}, {prerender: true})

%h1 Welcome to Preflight!

- unless user_signed_in?
  %div
    %a.hero-button.btn.btn-lg.btn-block.btn-primary{type: 'button', href: user_omniauth_authorize_path(:github)} Auth Github to get started

%p.lead
  As software projects and teams grow, it gets more and more difficult for engineers to remember the things they should consider when making changes to the code. This can be partially mitigated by a comprehensive test suite, which will (in many cases) tell engineers when they've broken existing functionality, but a test suite falls short of capturing (at least) the following problems: introduction of security holes, performance regressions, visual bugs and regressions, UX issues, failure to mobile optimize certain pages, and more.

%p.lead
  Preflight brings to software development what preflight checklists provided for airline safety: a list of things that every engineer has to think about before marking a pull request as "ready for review". With preflight, you can create checklists for repositories, and, when engineers create new pull requests, the checklists are automatically added to the pull request description.

%p.lead
  Unlike testing, preflight checklists won't "break" if someone doesn't look at them. Instead, they are ways of helping engineers avoid common mistakes and regressions. How you use them is up to you and what works best for your team. For certain checklists, you might want to require that engineers "check off" each item to verify that they've done it, like you might want a mechanic to "check off" that they've verified the engine on a plane. For other checklists, you might simply want to list a bunch of things for the engineer to consider, like a list of supported browsers, and leave it up to the engineer's discretion on what he/she thinks is worth checking.
